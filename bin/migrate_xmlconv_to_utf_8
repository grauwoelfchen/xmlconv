#!/usr/bin/env ruby
# encoding: utf-8
puts "#{Time.now}: Loading #{__FILE__}"
STDOUT.sync = true

require 'syck'

if ARGV.size != 1 || !File.exist?(ARGV[0])
  puts "#{__FILE__}: Must specify a config yaml for the database connection"
  exit
end
config = YAML.load_file(ARGV[0])
puts "DB used is DBI:Pg:#{config['db_name']} #{config['db_user']} #{config['db_auth']}"

here = File.expand_path(File.join(File.dirname(File.dirname(__FILE__)), 'lib'))
$: << here
require 'logger'
require 'needle'
require 'odba/id_server'
require 'rrba/server'
require 'yus/entity'
require 'yus/privilege'
require 'ydim/autoinvoicer'
require 'ydim/client'
require 'ydim/currency_converter'
require 'ydim/currency_updater'
require 'ydim/factory'
require 'ydim/root_user'
require 'ydim/server'
require 'ydim/util'
require 'odba/connection_pool'
require 'odba/drbwrapper'
require 'ydim/root_user'
require 'ydim/autoinvoicer'
require 'xmlconv/model/address'
require 'xmlconv/model/delivery'
require 'xmlconv/model/name'
require 'xmlconv/model/party'
require 'xmlconv/model/bdd'
require 'xmlconv/model/item'
require 'xmlconv/model/bsr'
require 'xmlconv/model/delivery_item'
require 'xmlconv/util/application'
require 'xmlconv/util/session'
require 'xmlconv/util/transaction'

module XmlConv
  class Server
    # http://stackoverflow.com/questions/2982677/ruby-1-9-invalid-byte-sequence-in-utf-8
    # https://robots.thoughtbot.com/fight-back-utf-8-invalid-byte-sequences
    def sanitize_utf8(string)
      return nil if string.nil?
      # return string.encode('UTF-8', 'binary', invalid: :replace, undef: :replace, replace: '')
      return string if string.valid_encoding?
      if string.force_encoding(Encoding::ISO_8859_1).valid_encoding?
        string.force_encoding(Encoding::ISO_8859_1).clone.encode(Encoding::UTF_8)
      else
        string.chars.select { |c| c.valid_encoding? }.join
      end
    end
    def _migrate_to_utf8 queue, table, opts={}
      while obj = queue.shift do
        if obj.is_a?(Numeric)
          begin
            obj = ODBA.cache.fetch obj
          rescue ODBA::OdbaError
            return
          end
        else
          obj = obj.odba_instance
        end
        puts " #{__LINE__}: #{Time.now} Migrating #{obj.class} #{obj.to_s}" if obj.is_a?(XmlConv::Model::Bdd) # if $VERBOSE
        return unless obj
        _migrate_obj_to_utf8 obj, queue, table, opts
        obj.odba_store unless obj.odba_unsaved?
      end
    end
    def _migrate_obj_to_utf8 obj, queue, table, opts={}
      obj.instance_variables.each do |name|
        child = obj.instance_variable_get name
        if child.respond_to?(:odba_unsaved?) && !child.odba_unsaved? \
          && obj.respond_to?(:odba_serializables) \
          && obj.odba_serializables.include?(name)
          child.instance_variable_set '@odba_persistent', nil
        end
        child = _migrate_child_to_utf8 child, queue, table, opts
        obj.instance_variable_set name, child
      end
      if obj.is_a?(Array)
        obj.collect! do |child|
          _migrate_child_to_utf8 child, queue, table, opts
        end
      end
      if obj.is_a?(Hash)
        obj.dup.each do |key, child|
          obj.store key, _migrate_child_to_utf8(child, queue, table, opts)
        end
      end
      obj
    end
    def _migrate_child_to_utf8 child, queue, table, opts={}
      @serialized ||= {}
      case child
      when ODBA::Persistable, ODBA::Stub
        if child = child.odba_instance
          if child.odba_unsaved?
            _migrate_to_utf8 [child], table, opts
          elsif opts[:all]
            odba_id = child.odba_id
            unless table[odba_id]
              table.store odba_id, true
              queue.push odba_id
            end
          end
        end
      when String
        old = child.encoding
        if ( child.encoding != Encoding::UTF_8 && child.force_encoding(Encoding::ISO_8859_1).valid_encoding? ) ||
           ( child.encoding == Encoding::UTF_8 && !child.valid_encoding? )
          child = child.force_encoding(Encoding::ISO_8859_1).clone.encode(Encoding::UTF_8)
          puts "force_encoding from ISO_8859_1 #{old}. is now #{child}" if $VERBOSE
        end
        case child.encoding.to_s
        when /ASCII-8BIT|US-ASCII/
          # nothing todo
        when /UTF-8/
          puts "UTF-8: for #{child.to_s}" if $VERBOSE
          child = sanitize_utf8(child)
        when /ISO-8859-1/i
          child = sanitize_utf8(child)
          # child = child.force_encoding('UTF-8')
          puts "force_encoding from #{old}. is now #{child}" if $VERBOSE
        else
          puts "Unhandeled encoding #{child.encoding}"
        # child = child.force_encoding
        end
      when
        Yus::Entity,
        Yus::Privilege,
        YDIM::AutoInvoice,
        YDIM::Debitor,
        YDIM::Debitor,
        YDIM::Invoice,
        YDIM::Invoice::Info,
        YDIM::Item,
        XmlConv::Model::Bdd
        child = _migrate_obj_to_utf8 child, queue, table, opts
      when Float, Fixnum, TrueClass, FalseClass, NilClass,
        XmlConv::Model::Name,
        XmlConv::Model::Item,
        XmlConv::Model::Party,
        XmlConv::Model::Bsr,
        Symbol, Time, Date, DateTime
        # do nothing
      else
        @ignored ||= {}
        unless @ignored[child.class]
          @ignored.store child.class, true
          warn "ignoring #{child.class}"
        end
      end
      child
    rescue SystemStackError
      puts child.class
      raise
    end
  end
end

@logger = Logger.new('/tmp/ migrate_to_utf8.log')
@logger.level = Logger::DEBUG
module Yus
  class Entity
    include ODBA::Persistable
    class << self
      alias :all :odba_extent
    end
  end
  class Privilege
    include ODBA::Persistable
    class << self
      alias :all :odba_extent
    end
  end
end
module XmlConv
  module Model
    class Address
      include ODBA::Persistable
      class << self
        alias :all :odba_extent
      end
    end
    class Transaction
      include ODBA::Persistable
      class << self
        alias :all :odba_extent
      end
    end
    class Bdd
      include ODBA::Persistable
      class << self
        alias :all :odba_extent
      end
    end
    class Party
      include ODBA::Persistable
      class << self
        alias :all :odba_extent
      end
    end if false
    class Bsr
      include ODBA::Persistable
      class << self
        alias :all :odba_extent
      end
    end if false
  end
end

ODBA.storage.dbi = ODBA::ConnectionPool.new("DBI:Pg:#{config['db_name']}", config['db_user'], config['db_auth'], :client_encoding => 'LATIN1')
ODBA.cache.setup
DRb.install_id_conv ODBA::DRbIdConv.new

@server = XmlConv::Server.new
@server.extend(DRbUndumped)
session = YDIM::RootSession.new(YDIM::RootUser.new(1))

session.serv = @server
{ :bdds => XmlConv::Model::Bdd.odba_extent,
}.each do |name, to_migrate|
  puts "#{Time.now}: Start migrating #{to_migrate.size} #{name}"
  @server._migrate_to_utf8(to_migrate, {})
end
puts "#{Time.now}: Finished #{__FILE__}"
